[
    {
        "id": "5f562f66.a301e",
        "type": "tab",
        "label": "device-message-adapter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "21ff842d.62f36c",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyS0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "newline": "28",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker 1",
        "broker": "$(MQTTSERVERIP1)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "879890f3.4ffd4",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker 2",
        "broker": "$(MQTTSERVERIP2)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "ea743ee6.d8b55",
        "type": "serial in",
        "z": "5f562f66.a301e",
        "name": "Teensy",
        "serial": "21ff842d.62f36c",
        "x": 70,
        "y": 320,
        "wires": [
            [
                "d5761f6c.c46e6"
            ]
        ]
    },
    {
        "id": "93049b70.2dc5c8",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings 1",
        "topic": "$(MQTTPUBLISHTOPIC)",
        "qos": "0",
        "retain": "false",
        "broker": "79250bf3.365cc4",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "3f988ea4.7ee392",
        "type": "serial out",
        "z": "5f562f66.a301e",
        "name": "Teensy",
        "serial": "21ff842d.62f36c",
        "x": 1140,
        "y": 120,
        "wires": []
    },
    {
        "id": "8cda9011.eab33",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings 1",
        "topic": "$(MQTTSUBSCRIBETOPIC)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "dc36009e.fdeeb"
            ]
        ]
    },
    {
        "id": "dc36009e.fdeeb",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 40,
        "wires": [
            [
                "85cf48c1.e37fe8",
                "697e223b.a3653c"
            ]
        ]
    },
    {
        "id": "5902d0c0.241a6",
        "type": "file",
        "z": "5f562f66.a301e",
        "name": "Write initSettings.json",
        "filename": "initSettings.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f3f3f15.081c31",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "createSettings",
        "func": "function getAttrObject(device, propName, attrName)\n{\n    var props = device[propName];\n    var attr = props.find(attr => attr.attr === attrName);\n    return attr;\n}\nvar echoSettings = 0;\nvar ledState = 0;\nvar ledValue = 0;\nvar ledPeriod = 0;\nvar ultraAlarmDistance = 0;\n\nvar echoSettingsMask = 0;\nvar ledStateMask = 0;\nvar ledValueMask = 0;\nvar ledPeriodMask = 0;\nvar ultraAlarmDistanceMask = 0;\n\nvar device = {}\n\nif (msg.topic == 'echoSettings')\n{\n    echoSettings = msg.payload;\n    echoSettingsMask = 1;\n    device = flow.get('device');\n}\nelse\n{\n    device = msg.payload;\n    device.ultraDist.alarm.limits.low = device.ultraAlarm.value;\n    ledStateMask = 1;\n    ledValueMask = 1;\n    ledPeriodMask = 1;\n    ultraAlarmDistanceMask = 1;\n}\n\nvar buffer = new ArrayBuffer(40);\nvar settingsView = new DataView(buffer);\n\nsettingsView.setInt32(0,echoSettingsMask, true);\nsettingsView.setInt32(4,ledStateMask, true);\nsettingsView.setInt32(8,ledValueMask, true);\nsettingsView.setInt32(12,ledPeriodMask, true);\nsettingsView.setInt32(16,ultraAlarmDistanceMask, true);\n\nsettingsView.setInt32(20,echoSettings, true);\nsettingsView.setInt32(24,device.ledStateS.value, true);\nsettingsView.setInt32(28,device.ledValue.value, true);\nsettingsView.setInt32(32,device.ledPeriod.value, true);\nsettingsView.setInt32(36,device.ultraAlarm.value, true);\n\nreturn {topic:'settings',payload:Buffer.from(buffer)};\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 120,
        "wires": [
            [
                "3f988ea4.7ee392"
            ]
        ]
    },
    {
        "id": "302aa037.053d1",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "echoSettings",
        "payload": "1",
        "payloadType": "num",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "f3f3f15.081c31"
            ]
        ]
    },
    {
        "id": "6eaa13e9.4147bc",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "initSettings",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 140,
        "y": 240,
        "wires": [
            [
                "163af492.5e952b"
            ]
        ]
    },
    {
        "id": "163af492.5e952b",
        "type": "file in",
        "z": "5f562f66.a301e",
        "name": "Read initSettings.json",
        "filename": "initSettings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 360,
        "y": 240,
        "wires": [
            [
                "53c95857.5f3d68"
            ]
        ]
    },
    {
        "id": "53c95857.5f3d68",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 240,
        "wires": [
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Save initSettings in Memory",
        "func": "flow.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 240,
        "wires": [
            [
                "f3f3f15.081c31"
            ]
        ]
    },
    {
        "id": "d5761f6c.c46e6",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Parse Reading Byte Array",
        "func": "var ib;\n\nvar photoDetValueView       = new DataView(new ArrayBuffer(4));\nvar ultraDistanceView       = new DataView(new ArrayBuffer(4));\nvar ultraAlarmDistanceView  = new DataView(new ArrayBuffer(4));\nvar tempAvgView             = new DataView(new ArrayBuffer(4));\nvar ledStateView            = new DataView(new ArrayBuffer(4));\nvar ledValueView            = new DataView(new ArrayBuffer(4));\nvar ledPeriodView           = new DataView(new ArrayBuffer(4));\n\nfor (ib = 0; ib < 4; ++ib)      photoDetValueView.setUint8(ib, msg.payload[0 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)      ultraDistanceView.setUint8(ib, msg.payload[1 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib) ultraAlarmDistanceView.setUint8(ib, msg.payload[2 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)            tempAvgView.setUint8(ib, msg.payload[3 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)           ledStateView.setUint8(ib, msg.payload[4 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)           ledValueView.setUint8(ib, msg.payload[5 * 4 + 3 - ib]);\nfor (ib = 0; ib < 4; ++ib)          ledPeriodView.setUint8(ib, msg.payload[6 * 4 + 3 - ib]);\n\nvar device = flow.get('device');\ndevice.ledStateR.value = ledStateView.getInt32(0);\ndevice.photoDet.value = photoDetValueView.getInt32(0);\ndevice.temperature.value = Math.round(100.0 * tempAvgView.getFloat32(0)) / 100.0;\ndevice.ultraDist.value = ultraDistanceView.getInt32(0);\ndevice.linkQuality.value = flow.get('linkQuality');\ndevice.signalLevel.value = flow.get('signalLevel');\n\nreturn {topic : 'reading', payload : device};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 320,
        "wires": [
            [
                "fafe8611.1f12e8"
            ]
        ]
    },
    {
        "id": "fafe8611.1f12e8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Fake Vector Data",
        "func": "var x = [];\nvar y = [];\nvar npts = 51;\nvar harm = msg.payload.fakevecHarm.value;\nvar deltaPhi = msg.payload.fakevecDphi.value;\nvar phi = context.get('phi');\nif (phi == undefined) phi = -deltaPhi;\nphi = phi + deltaPhi;\ncontext.set('phi', phi);\nfor (var ii = 0; ii < npts; ++ii)\n{\n   x[ii] = ii * 360.0 / (npts - 1);\n   y[ii] = Math.round( 1000 * Math.cos((x[ii] * harm + phi)  * Math.PI / 180.0)) / 1000;\n}\nmsg.payload.fakevec.value[0] = x;\nmsg.payload.fakevec.value[1] = y;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 320,
        "wires": [
            [
                "49205628.6aa4b8"
            ]
        ]
    },
    {
        "id": "f69c600b.9542",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 280,
        "y": 400,
        "wires": [
            [
                "afd71a05.ebd4e8"
            ],
            [],
            []
        ]
    },
    {
        "id": "5b86fa96.034764",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 400,
        "wires": [
            [
                "f69c600b.9542"
            ]
        ]
    },
    {
        "id": "afd71a05.ebd4e8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkStopIndex   = info.indexOf('/70');\nvar levelStopIndex   = info.lastIndexOf('dBm');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStopIndex));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStopIndex - 1));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nflow.set('linkQuality',linkQuality);\nflow.set('signalLevel', signalLevel);\nflow.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "85cf48c1.e37fe8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Make Pretty",
        "func": "var jsonPretty = JSON.stringify(msg.payload,null,2);\nreturn {topic: msg.payload, payload:jsonPretty};",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 40,
        "wires": [
            [
                "5902d0c0.241a6"
            ]
        ]
    },
    {
        "id": "6ec0c38f.0ee52c",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings 2",
        "topic": "$(MQTTPUBLISHTOPIC)",
        "qos": "0",
        "retain": "false",
        "broker": "879890f3.4ffd4",
        "x": 930,
        "y": 380,
        "wires": []
    },
    {
        "id": "9f5707f7.ca9788",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings 2",
        "topic": "$(MQTTSUBSCRIBETOPIC)",
        "qos": "0",
        "datatype": "auto",
        "broker": "879890f3.4ffd4",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "dc36009e.fdeeb"
            ]
        ]
    },
    {
        "id": "697e223b.a3653c",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Settings Alarm Scan",
        "func": "scalarAlarmScan(msg.payload, 'setting');\nflow.set('device', msg.payload); \n\nreturn msg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 100,
        "wires": [
            [
                "f3f3f15.081c31"
            ]
        ]
    },
    {
        "id": "49205628.6aa4b8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Readings Alarm Scan",
        "func": "scalarAlarmScan(msg.payload, 'reading');\nflow.set('device', msg.payload); \n\nreturn msg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 320,
        "wires": [
            [
                "93049b70.2dc5c8",
                "6ec0c38f.0ee52c",
                "5f26f55b.a5f87c"
            ]
        ]
    },
    {
        "id": "5f26f55b.a5f87c",
        "type": "debug",
        "z": "5f562f66.a301e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 880,
        "y": 480,
        "wires": []
    }
]